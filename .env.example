# ===================================================================
#         *** Always Attend Environment Configuration ***
# ===================================================================
#
# Copy this file to .env and fill in your details.
# cp .env.example .env

# -------------------------------------------------------------------
# [REQUIRED] MONASH & OKTA CREDENTIALS
# -------------------------------------------------------------------
# Your Monash account email and password.
#USERNAME="your_username"
#PASSWORD="your_password"

# Your Okta MFA TOTP Secret Key (Base32 encoded).
# This is the most reliable way to automate MFA.
# You can usually get this when you first set up your authenticator app.
#TOTP_SECRET="YOUR_BASE32_TOTP_SECRET"


# -------------------------------------------------------------------
# [REQUIRED] CORE CONFIGURATION
# -------------------------------------------------------------------
# The entry URL for the attendance portal.
PORTAL_URL="https://attendance.m0n@$h.edu.my"


# -------------------------------------------------------------------
# [OPTIONAL] ATTENDANCE CODE SOURCE
# -------------------------------------------------------------------
# The script can get attendance codes from multiple sources.
# It checks for them in the following order of priority:
#
# 1. Per-Slot Environment Variables (Highest Priority)
#    Define variables that match the slot names on the portal.
#    Example:
#    "Workshop 1"="JZXBA"
#    "Applied 1"="6B7UF"

# 2. Auto-Discovery via URL (Recommended for GitHub Actions)
#    The script will build a URL to fetch a JSON file with codes.
#    Requires: COURSE_CODE, WEEK_NUMBER, and CODES_BASE_URL.
#    Example URL constructed: {CODES_BASE_URL}/data/{COURSE_CODE}/{WEEK_NUMBER}.json
#
# COURSE_CODE="FIT1111"
# WEEK_NUMBER="3"
# CODES_BASE_URL="https://raw.githubusercontent.com/<your-username>/<your-repo>/main"

# 3. Direct URL to JSON file
#    If the URL doesn't follow the auto-discovery pattern.
#
# CODES_URL="https://example.com/path/to/your/codes.json"

# 4. Local JSON file
#    A file path relative to the project root.
#
# CODES_FILE="./codes.sample.json"

# 5. Inline Codes String (Lowest Priority)
#    A quick and simple way to provide codes for a single run.
#
# CODES="Workshop 1:ABCDE;Applied 1:FGHIJ"


# -------------------------------------------------------------------
# [OPTIONAL] BROWSER & SESSION SETTINGS
# -------------------------------------------------------------------
# Browser engine to use: chromium (default), firefox, or webkit.
BROWSER="chromium"

# Set to 0 to show the browser UI, 1 to run in the background (headless).
# It is recommended to set HEADLESS=0 for the first run (login).
HEADLESS="1"

# Path to save the session file. This allows the script to skip login on future runs.
STORAGE_STATE="storage_state.json"

# (Advanced) Use a persistent browser profile directory.
# When set, STORAGE_STATE is ignored, and sessions are managed by the browser itself.
# Useful for debugging or if you want to use your main Chrome profile.
# USER_DATA_DIR="./chrome-profile"


# -------------------------------------------------------------------
# [OPTIONAL] GITHUB ACTIONS INTEGRATION
# -------------------------------------------------------------------
# URL to create a new issue for reporting missing codes.
# This is used by the script to provide a helpful link if codes are not found.
# ISSUES_NEW_URL="https://github.com/<your-username>/<your-repo>/issues/new/choose"